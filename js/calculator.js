let display = document.getElementById('result');
let currentInput = '0';
let shouldResetDisplay = false;
let cursorPosition = 0;
let isScientificOpen = false;

function updateDisplay() {
    display.value = currentInput;
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
    setTimeout(() => {
        try {
            display.setSelectionRange(cursorPosition, cursorPosition);
        } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É—Ä—Å–æ—Ä–∞
        }
    }, 10);
}

function appendToDisplay(value) {
    if (shouldResetDisplay) {
        currentInput = '';
        shouldResetDisplay = false;
        cursorPosition = 0;
    }
    
    if (currentInput === '0' && value !== '.' && !'()'.includes(value)) {
        currentInput = value;
        cursorPosition = 1;
    } else if (currentInput === '0' && '()'.includes(value)) {
        currentInput = value;
        cursorPosition = 1;
    } else {
        currentInput = currentInput.slice(0, cursorPosition) + value + currentInput.slice(cursorPosition);
        cursorPosition += value.length;
    }
    
    updateDisplay();
}

function clearDisplay() {
    currentInput = '0';
    cursorPosition = 0;
    updateDisplay();
}

function deleteLast() {
    if (currentInput.length > 1 && cursorPosition > 0) {
        currentInput = currentInput.slice(0, cursorPosition - 1) + currentInput.slice(cursorPosition);
        cursorPosition--;
    } else if (currentInput.length === 1) {
        currentInput = '0';
        cursorPosition = 0;
    }
    updateDisplay();
}

function deleteForward() {
    if (currentInput.length > 1 && cursorPosition < currentInput.length) {
        currentInput = currentInput.slice(0, cursorPosition) + currentInput.slice(cursorPosition + 1);
    } else if (currentInput.length === 1) {
        currentInput = '0';
        cursorPosition = 0;
    }
    updateDisplay();
}

function moveCursorLeft() {
    if (cursorPosition > 0) {
        cursorPosition--;
        updateDisplay();
    }
}

function moveCursorRight() {
    if (cursorPosition < currentInput.length) {
        cursorPosition++;
        updateDisplay();
    }
}

function moveCursorToStart() {
    cursorPosition = 0;
    updateDisplay();
}

function moveCursorToEnd() {
    cursorPosition = currentInput.length;
    updateDisplay();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –≤ input
function handleDirectInput(e) {
    e.preventDefault();
    
    const key = e.key;
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
    if (key >= '0' && key <= '9') {
        appendToDisplay(key);
    } else if (key === '.') {
        appendToDisplay('.');
    } else if (key === '+') {
        appendToDisplay('+');
    } else if (key === '-') {
        appendToDisplay('-');
    } else if (key === '*') {
        appendToDisplay('*');
    } else if (key === '/') {
        appendToDisplay('/');
    } else if (key === '(') {
        appendToDisplay('(');
    } else if (key === ')') {
        appendToDisplay(')');
    } else if (key === '%') {
        appendToDisplay('%');
    } else if (key === 'Enter' || key === '=') {
        calculate();
    } else if (key === 'Escape' || key === 'Delete') {
        clearDisplay();
    } else if (key === 'Backspace') {
        deleteLast();
    } else if (key === 'ArrowLeft') {
        moveCursorLeft();
    } else if (key === 'ArrowRight') {
        moveCursorRight();
    } else if (key === 'Home') {
        moveCursorToStart();
    } else if (key === 'End') {
        moveCursorToEnd();
    }
    // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
}

function setupCursorControl() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É—Ä—Å–æ—Ä–∞
    display.addEventListener('click', function(e) {
        const rect = display.getBoundingClientRect();
        const clickX = e.clientX - rect.left;
        cursorPosition = Math.max(0, Math.min(currentInput.length, 
            Math.round((clickX / rect.width) * currentInput.length)));
        updateDisplay();
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–ª–∞–≤–∏—à
    display.addEventListener('keydown', handleDirectInput);
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å—Ç–∞–≤–∫—É
    display.addEventListener('paste', function(e) {
        e.preventDefault();
    });
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
    display.addEventListener('select', function(e) {
        e.preventDefault();
    });
    
    display.addEventListener('dragstart', function(e) {
        e.preventDefault();
    });
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—É—á–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –°–ü–†–ê–í–ê
function toggleScientific() {
    const sidebar = document.getElementById('scientificSidebar');
    const toggleBtn = document.getElementById('scientificToggle');
    
    isScientificOpen = !isScientificOpen;
    
    if (isScientificOpen) {
        sidebar.classList.remove('collapsed');
        sidebar.classList.add('expanded');
        toggleBtn.classList.add('active');
        toggleBtn.innerHTML = '<span>üî¨ –û—Å–Ω–æ–≤–Ω–æ–π</span>';
    } else {
        sidebar.classList.remove('expanded');
        sidebar.classList.add('collapsed');
        toggleBtn.classList.remove('active');
        toggleBtn.innerHTML = '<span>üî¨ –ù–∞—É—á–Ω—ã–π</span>';
    }
}

function togglePlusMinus() {
    if (currentInput !== '0' && currentInput !== '') {
        if (currentInput.startsWith('-')) {
            currentInput = currentInput.slice(1);
        } else {
            currentInput = '-' + currentInput;
        }
        cursorPosition = currentInput.length;
        updateDisplay();
    }
}

function calculate() {
    try {
        let expression = currentInput
            .replace(/√ó/g, '*')
            .replace(/√∑/g, '/')
            .replace(/%/g, '/100')
            .replace(/œÄ/g, Math.PI.toString())
            .replace(/e/g, Math.E.toString());
        
        if (!isBalancedParentheses(expression)) {
            throw new Error('–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏');
        }
        
        if (isValidExpression(expression)) {
            let result = evaluateExpression(expression);
            result = Math.round(result * 10000000000) / 10000000000;
            currentInput = formatResult(result);
            cursorPosition = currentInput.length;
            shouldResetDisplay = true;
            updateDisplay();
        } else {
            throw new Error('–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ');
        }
    } catch (error) {
        currentInput = '–û—à–∏–±–∫–∞';
        cursorPosition = 0;
        shouldResetDisplay = true;
        updateDisplay();
        
        setTimeout(() => {
            if (currentInput === '–û—à–∏–±–∫–∞') {
                clearDisplay();
            }
        }, 2000);
    }
}

function isBalancedParentheses(expression) {
    let balance = 0;
    for (let char of expression) {
        if (char === '(') balance++;
        if (char === ')') balance--;
        if (balance < 0) return false;
    }
    return balance === 0;
}

function isValidExpression(expression) {
    const validChars = /^[0-9+\-*/.()% œÄe\s]+$/;
    return validChars.test(expression.replace(/Math\.PI/g, '').replace(/Math\.E/g, ''));
}

function evaluateExpression(expression) {
    expression = expression.replace(/\+\+/g, '+').replace(/\-\-/g, '+');
    expression = expression.replace(/\+\-/g, '-').replace(/\-\+/g, '-');
    return eval(expression);
}

function formatResult(result) {
    if (typeof result !== 'number' || !isFinite(result)) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
    }
    if (result % 1 === 0) {
        return result.toString();
    }
    return parseFloat(result.toFixed(8)).toString();
}

// –ù–∞—É—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function calculateSquareRoot() {
    try {
        if (currentInput === '0') return;
        const value = parseFloat(currentInput);
        if (value >= 0) {
            currentInput = Math.sqrt(value).toString();
            cursorPosition = currentInput.length;
            shouldResetDisplay = true;
            updateDisplay();
        } else {
            throw new Error('–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ');
        }
    } catch (error) {
        showError('–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ');
    }
}

function calculatePower(power) {
    try {
        if (currentInput === '0') return;
        const value = parseFloat(currentInput);
        currentInput = Math.pow(value, power).toString();
        cursorPosition = currentInput.length;
        shouldResetDisplay = true;
        updateDisplay();
    } catch (error) {
        showError('–û—à–∏–±–∫–∞');
    }
}

function calculateSin() {
    try {
        if (currentInput === '0') return;
        const value = parseFloat(currentInput);
        currentInput = Math.sin(value * Math.PI / 180).toString();
        cursorPosition = currentInput.length;
        shouldResetDisplay = true;
        updateDisplay();
    } catch (error) {
        showError('–û—à–∏–±–∫–∞');
    }
}

function calculateCos() {
    try {
        if (currentInput === '0') return;
        const value = parseFloat(currentInput);
        currentInput = Math.cos(value * Math.PI / 180).toString();
        cursorPosition = currentInput.length;
        shouldResetDisplay = true;
        updateDisplay();
    } catch (error) {
        showError('–û—à–∏–±–∫–∞');
    }
}

function calculateTan() {
    try {
        if (currentInput === '0') return;
        const value = parseFloat(currentInput);
        currentInput = Math.tan(value * Math.PI / 180).toString();
        cursorPosition = currentInput.length;
        shouldResetDisplay = true;
        updateDisplay();
    } catch (error) {
        showError('–û—à–∏–±–∫–∞');
    }
}

function calculateLog() {
    try {
        if (currentInput === '0') return;
        const value = parseFloat(currentInput);
        if (value > 0) {
            currentInput = Math.log10(value).toString();
            cursorPosition = currentInput.length;
            shouldResetDisplay = true;
            updateDisplay();
        } else {
            throw new Error('–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ');
        }
    } catch (error) {
        showError('–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ');
    }
}

function calculateLn() {
    try {
        if (currentInput === '0') return;
        const value = parseFloat(currentInput);
        if (value > 0) {
            currentInput = Math.log(value).toString();
            cursorPosition = currentInput.length;
            shouldResetDisplay = true;
            updateDisplay();
        } else {
            throw new Error('–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ');
        }
    } catch (error) {
        showError('–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ');
    }
}

function calculateFactorial() {
    try {
        if (currentInput === '0') return;
        const value = parseInt(currentInput);
        if (value >= 0 && value <= 100) {
            let result = 1;
            for (let i = 2; i <= value; i++) {
                result *= i;
            }
            currentInput = result.toString();
            cursorPosition = currentInput.length;
            shouldResetDisplay = true;
            updateDisplay();
        } else {
            throw new Error('–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ');
        }
    } catch (error) {
        showError('–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ');
    }
}

function showError(message) {
    currentInput = message;
    cursorPosition = 0;
    shouldResetDisplay = true;
    updateDisplay();
    setTimeout(() => {
        if (currentInput === message) {
            clearDisplay();
        }
    }, 2000);
}

function openParenthesis() {
    appendToDisplay('(');
}

function closeParenthesis() {
    appendToDisplay(')');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–π –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
function handleSpecialAction() {
    if (currentInput !== '0' && currentInput !== '–û—à–∏–±–∫–∞') {
        // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        navigator.clipboard.writeText(currentInput).then(() => {
            // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            const actionBtn = document.querySelector('.calculator-action-btn');
            const originalText = actionBtn.innerHTML;
            
            actionBtn.innerHTML = '<span class="btn-icon">‚úÖ</span><span>–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!</span>';
            actionBtn.classList.add('pulse');
            
            setTimeout(() => {
                actionBtn.innerHTML = originalText;
                actionBtn.classList.remove('pulse');
            }, 2000);
        }).catch(err => {
            console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ', err);
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –µ—Å–ª–∏ clipboard –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
            showTemporaryMessage('–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ä—É—á–Ω—É—é: ' + currentInput);
        });
    } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏–º–µ—Ä
        currentInput = '2+2*2';
        cursorPosition = currentInput.length;
        updateDisplay();
        
        const actionBtn = document.querySelector('.calculator-action-btn');
        const originalText = actionBtn.innerHTML;
        
        actionBtn.innerHTML = '<span class="btn-icon">üî¢</span><span>–ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω</span>';
        
        setTimeout(() => {
            actionBtn.innerHTML = originalText;
        }, 1500);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
function showTemporaryMessage(message) {
    const messageEl = document.createElement('div');
    messageEl.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: rgba(102, 126, 234, 0.9);
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        z-index: 10000;
        font-size: 14px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    `;
    messageEl.textContent = message;
    document.body.appendChild(messageEl);
    
    setTimeout(() => {
        document.body.removeChild(messageEl);
    }, 3000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    setupCursorControl();
    updateDisplay();
    
    // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –¥–∏—Å–ø–ª–µ–π
    setTimeout(() => {
        display.focus();
        cursorPosition = currentInput.length;
        updateDisplay();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–ª—å—Å–∞—Ü–∏—é –∫–Ω–æ–ø–∫–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã
        const actionBtn = document.querySelector('.calculator-action-btn');
        if (actionBtn) {
            actionBtn.classList.add('pulse');
            setTimeout(() => {
                actionBtn.classList.remove('pulse');
            }, 3000);
        }
    }, 100);
    
    display.style.cursor = 'text';
    display.title = '–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É—Ä—Å–æ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ ‚Üê ‚Üí –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è.';
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–∞—É—á–Ω—É—é –ø–∞–Ω–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const sidebar = document.getElementById('scientificSidebar');
    const toggleBtn = document.getElementById('scientificToggle');
    if (sidebar && toggleBtn) {
        sidebar.classList.add('collapsed');
        toggleBtn.classList.remove('active');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
    addButtonAnimations();
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π –∫–Ω–æ–ø–∫–∞–º
function addButtonAnimations() {
    const buttons = document.querySelectorAll('.calc-btn');
    buttons.forEach(btn => {
        btn.addEventListener('mousedown', function() {
            this.style.transform = 'scale(0.95)';
        });
        
        btn.addEventListener('mouseup', function() {
            this.style.transform = '';
        });
        
        btn.addEventListener('mouseleave', function() {
            this.style.transform = '';
        });
    });
}