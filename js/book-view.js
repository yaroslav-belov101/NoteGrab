const { ipcRenderer } = require('electron');

document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–Ω–∏–≥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏
    loadBookData();
});

function loadBookData() {
    const bookId = localStorage.getItem('currentBookId');
    const savedBooks = localStorage.getItem('allBooks');
    
    console.log('üìñ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥–∏:', bookId);

    if (!bookId) {
        showError('–ö–Ω–∏–≥–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É.');
        return;
    }

    if (savedBooks) {
        try {
            const books = JSON.parse(savedBooks);
            const book = books.find(b => b.id === bookId);
            
            if (book) {
                console.log('‚úÖ –ö–Ω–∏–≥–∞ –Ω–∞–π–¥–µ–Ω–∞:', book);
                renderBookDetails(book);
            } else {
                showError(`–ö–Ω–∏–≥–∞ —Å ID "${bookId}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–Ω–∏–≥:', error);
            showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥–∏.');
        }
    } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ JSON
        loadBookFromJSON(bookId);
    }
}

async function checkBookFile(book) {
    if (!book.filePath) {
        return { exists: false, error: '–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ —É–∫–∞–∑–∞–Ω' };
    }
    
    try {
        const { ipcRenderer } = require('electron');
        const fileExists = await ipcRenderer.invoke('file-exists', book.filePath);
        return { exists: fileExists, error: fileExists ? null : '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    } catch (error) {
        return { exists: false, error: error.message };
    }
}

function loadBookFromJSON(bookId) {
    console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥–∏ –∏–∑ JSON...');
    
    fetch('data_lib/library.json')
        .then(response => {
            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏');
            }
            return response.json();
        })
        .then(books => {
            const book = books.find(b => b.id === bookId);
            if (book) {
                renderBookDetails(book);
            } else {
                showError('–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ');
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏: ' + error.message);
        });
}

async function renderBookDetails(book) {
    const container = document.getElementById('book-details');
    
    if (!container) {
        console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä book-details –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    const fileCheck = await checkBookFile(book);
    
    const title = book.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
    const author = book.author || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä';
    const genre = book.genre || '–ù–µ —É–∫–∞–∑–∞–Ω';
    const description = book.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
    
    let dateText = '';
    try {
        const date = book.addedDate || book.dateAdded || book.date;
        dateText = date ? new Date(date).toLocaleDateString('ru-RU') : '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    } catch (e) {
        dateText = '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    }

    const coverContent = book.cover ? 
        `<img src="${book.cover}" alt="${title}" class="book-cover-large">` : 
        `<div class="book-cover-placeholder">üìñ</div>`;

    // –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞
    const fileStatus = fileCheck.exists ? 
        '<span style="color: #10b981;">‚úÖ –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω</span>' : 
        `<span style="color: #ef4444;">‚ùå –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${fileCheck.error}</span>`;

    container.innerHTML = `
        <div class="book-header">
            <div class="book-cover-section">
                ${coverContent}
            </div>
        </div>
        
        <div class="book-info-section">
            <h1 class="book-title-large">${escapeHtml(title)}</h1>
            <p class="book-author-large">${escapeHtml(author)}</p>
            
            <div class="book-meta-info">
                <div class="meta-item">
                    <span class="meta-label">–ñ–∞–Ω—Ä:</span>
                    <span class="meta-value">${escapeHtml(genre)}</span>
                </div>
                <div class="meta-item">
                    <span class="meta-label">–î–æ–±–∞–≤–ª–µ–Ω–∞:</span>
                    <span class="meta-value">${escapeHtml(dateText)}</span>
                </div>
                <div class="meta-item">
                    <span class="meta-label">–§–æ—Ä–º–∞—Ç:</span>
                    <span class="meta-value">${getFileFormat(book.filePath)}</span>
                </div>
                <div class="meta-item">
                    <span class="meta-label">–°—Ç–∞—Ç—É—Å:</span>
                    <span class="meta-value">${fileStatus}</span>
                </div>
            </div>
            
            <div class="book-description-section">
                <h3>–û–ø–∏—Å–∞–Ω–∏–µ</h3>
                <p class="book-description-full">${escapeHtml(description)}</p>
            </div>
            
            <div class="book-actions">
                <button class="read-button" onclick="startReading('${escapeHtml(book.id)}')" ${!fileCheck.exists ? 'disabled' : ''}>
                    üìñ ${fileCheck.exists ? '–ù–∞—á–∞—Ç—å —á—Ç–µ–Ω–∏–µ' : '–§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
                </button>
                ${!fileCheck.exists ? `
                <p style="color: #ef4444; margin-top: 10px; font-size: 0.9em;">
                    –§–∞–π–ª –∫–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: ${book.filePath}
                </p>
                ` : ''}
            </div>
        </div>
    `;
    
    console.log('‚úÖ –î–µ—Ç–∞–ª–∏ –∫–Ω–∏–≥–∏ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω—ã');
}

function getFileFormat(filePath) {
    if (!filePath) return '–ù–µ —É–∫–∞–∑–∞–Ω';
    
    const extension = filePath.split('.').pop().toLowerCase();
    const formats = {
        'pdf': 'PDF',
        'epub': 'EPUB', 
        'txt': '–¢–µ–∫—Å—Ç',
        'fb2': 'FB2'
    };
    
    return formats[extension] || extension.toUpperCase();
}

function startReading(bookId) {
    console.log('üìñ –ó–∞–ø—É—Å–∫ —á—Ç–µ–Ω–∏—è –∫–Ω–∏–≥–∏:', bookId);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –¥–ª—è —á–∏—Ç–∞–ª–∫–∏
    const savedBooks = localStorage.getItem('allBooks');
    if (savedBooks) {
        const books = JSON.parse(savedBooks);
        const book = books.find(b => b.id === bookId);
        
        if (book) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –¥–ª—è —á–∏—Ç–∞–ª–∫–∏
            localStorage.setItem('currentReadingBookId', bookId);
            localStorage.setItem('currentReadingBook', JSON.stringify(book));
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∏—Ç–∞–ª–∫—É –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ Electron
            ipcRenderer.invoke('open-reader-window')
                .then(result => {
                    if (result.success) {
                        console.log('‚úÖ –ß–∏—Ç–∞–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞');
                    } else {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∏—Ç–∞–ª–∫–∏');
                        // Fallback: –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ
                        window.location.href = 'book-reader.html';
                    }
                })
                .catch(error => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ IPC:', error);
                    // Fallback: –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ
                    window.location.href = 'book-reader.html';
                });
        } else {
            alert('–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ!');
        }
    } else {
        alert('–î–∞–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
    }
}

function goBackToLibrary() {
    console.log('üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É');
    window.location.href = 'library.html';
}

function showError(message) {
    const container = document.getElementById('book-details');
    if (container) {
        container.innerHTML = `
            <div class="error-state">
                <div class="error-icon">‚ö†Ô∏è</div>
                <h2>–û—à–∏–±–∫–∞</h2>
                <p>${message}</p>
                <button class="back-button" onclick="goBackToLibrary()" style="margin-top: 20px;">
                    ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
                </button>
            </div>
        `;
    }
}

function escapeHtml(unsafe) {
    if (typeof unsafe !== 'string') return unsafe;
    return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
const style = document.createElement('style');
style.textContent = `
    .loading-state {
        text-align: center;
        padding: 60px 20px;
        color: #94a3b8;
    }
    
    .loading-spinner {
        width: 40px;
        height: 40px;
        border: 3px solid #334155;
        border-top: 3px solid #667eea;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 20px;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
`;
document.head.appendChild(style);