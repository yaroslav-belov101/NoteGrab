const { ipcRenderer } = require('electron');
const path = require('path');

document.addEventListener('DOMContentLoaded', () => {
    const booksContainer = document.getElementById('books-container');
    const searchInput = document.getElementById('search-input');
    const genreFilter = document.getElementById('genre-filter');
    const sortSelect = document.getElementById('sort-by');
    const addBookBtn = document.getElementById('add-book-btn');
    const addBookModal = document.getElementById('add-book-modal');
    const bookForm = document.getElementById('book-form');
    const coverImageInput = document.getElementById('cover-image');
    const coverPreview = document.getElementById('cover-preview');
    const dropZone = document.getElementById('drop-zone');

    let books = [];

    function init() {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏...');
        loadBooks();
        setupEventListeners();
        setupDragAndDrop();
    }

    function loadBooks() {
        console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥...');
        
        // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        if (booksContainer) {
            booksContainer.innerHTML = `
                <div class="loading-state" style="grid-column: 1 / -1; text-align: center; padding: 60px 20px;">
                    <div class="loading-spinner"></div>
                    <h3 style="color: #fff; margin: 20px 0 10px;">–ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏...</h3>
                    <p style="color: #94a3b8;">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ</p>
                </div>
            `;
        }

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ JSON —Ñ–∞–π–ª–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫)
        loadBooksFromJSON()
            .then(() => {
                console.log('‚úÖ –ö–Ω–∏–≥–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ JSON');
            })
            .catch(error => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ JSON:', error);
                // –ï—Å–ª–∏ JSON –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, –ø—Ä–æ–±—É–µ–º localStorage
                loadBooksFromLocalStorage();
            });
    }

    function loadBooksFromJSON() {
        return new Promise((resolve, reject) => {
            console.log('üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ data_lib/library.json...');
            
            fetch('data_lib/library.json')
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('‚úÖ JSON –∑–∞–≥—Ä—É–∂–µ–Ω:', data.length, '–∫–Ω–∏–≥');
                    
                    if (!Array.isArray(data)) {
                        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON: –æ–∂–∏–¥–∞–ª—Å—è –º–∞—Å—Å–∏–≤');
                    }
                    
                    books = data;
                    
                    if (books.length === 0) {
                        showEmptyLibrary();
                    } else {
                        renderBooks(books);
                        populateGenres(books);
                    }
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                    localStorage.setItem('allBooks', JSON.stringify(books));
                    
                    resolve();
                })
                .catch(error => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON:', error);
                    reject(error);
                });
        });
    }

    function loadBooksFromLocalStorage() {
        console.log('üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage...');
        
        const savedBooks = localStorage.getItem('allBooks');
        
        if (savedBooks) {
            try {
                books = JSON.parse(savedBooks);
                console.log('‚úÖ –ö–Ω–∏–≥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage:', books.length, '–∫–Ω–∏–≥');
                
                if (books.length === 0) {
                    showEmptyLibrary();
                } else {
                    renderBooks(books);
                    populateGenres(books);
                    showMessage('–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏', 'info');
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ localStorage:', error);
                showTestData();
            }
        } else {
            console.log('üìÅ localStorage –ø—É—Å—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
            showTestData();
        }
    }

    function showEmptyLibrary() {
        if (booksContainer) {
            booksContainer.innerHTML = `
                <div class="empty-state" style="grid-column: 1 / -1; text-align: center; padding: 60px 20px;">
                    <div class="empty-icon" style="font-size: 64px; margin-bottom: 20px;">üìö</div>
                    <h3 style="color: #fff; margin-bottom: 15px;">–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—É—Å—Ç–∞</h3>
                    <p style="color: #94a3b8; margin-bottom: 25px;">–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–Ω–∏–≥—É</p>
                    <button class="add-book-button" onclick="openAddBookModal()">
                        + –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É
                    </button>
                </div>
            `;
        }
    }

    function showTestData() {
        console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        
        books = [
            {
                id: "1",
                title: "–ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞",
                author: "–ú–∏—Ö–∞–∏–ª –ë—É–ª–≥–∞–∫–æ–≤",
                genre: "–ö–ª–∞—Å—Å–∏–∫–∞",
                description: "–û–¥–∏–Ω –∏–∑ –≤–µ–ª–∏—á–∞–π—à–∏—Ö —Ä–æ–º–∞–Ω–æ–≤ XX –≤–µ–∫–∞, —Å–æ—á–µ—Ç–∞—é—â–∏–π –º–∏—Å—Ç–∏–∫—É, —Å–∞—Ç–∏—Ä—É –∏ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫—É—é –ø—Ä–æ–∑—É.",
                addedDate: "2024-01-15",
                cover: "",
                filePath: "books/master_i_margarita.pdf"
            },
            {
                id: "2", 
                title: "1984",
                author: "–î–∂–æ—Ä–¥–∂ –û—Ä—É—ç–ª–ª",
                genre: "–ê–Ω—Ç–∏—É—Ç–æ–ø–∏—è",
                description: "–ó–Ω–∞–º–µ–Ω–∏—Ç–∞—è –∞–Ω—Ç–∏—É—Ç–æ–ø–∏—è –æ —Ç–æ—Ç–∞–ª–∏—Ç–∞—Ä–Ω–æ–º –æ–±—â–µ—Å—Ç–≤–µ –∏ –ø–æ—Ç–µ—Ä–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç–∏.",
                addedDate: "2024-01-17", 
                cover: "",
                filePath: "books/1984.epub"
            }
        ];
        
        renderBooks(books);
        populateGenres(books);
        localStorage.setItem('allBooks', JSON.stringify(books));
        
        showMessage('–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏', 'info');
    }

    function reloadFromJSON() {
        console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ JSON...');
        loadBooksFromJSON()
            .then(() => {
                showMessage('–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞', 'success');
            })
            .catch(error => {
                showMessage('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ JSON: ' + error.message, 'error');
            });
    }

    function setupEventListeners() {
        // –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        if (searchInput) searchInput.addEventListener('input', applyFilters);
        if (genreFilter) genreFilter.addEventListener('change', applyFilters);
        if (sortSelect) sortSelect.addEventListener('change', applyFilters);
        
        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        if (addBookBtn) addBookBtn.addEventListener('click', openAddBookModal);
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const closeButtons = document.querySelectorAll('.close, #cancel-btn');
        closeButtons.forEach(btn => {
            if (btn) btn.addEventListener('click', closeAddBookModal);
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        window.addEventListener('click', (event) => {
            if (event.target === addBookModal) {
                closeAddBookModal();
            }
        });

        // –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
        if (bookForm) {
            bookForm.addEventListener('submit', handleAddBookSubmit);
        }

        // –ü—Ä–µ–≤—å—é –æ–±–ª–æ–∂–∫–∏
        if (coverImageInput) {
            coverImageInput.addEventListener('change', handleCoverPreview);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        addReloadButton();

        console.log('‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }

    function addReloadButton() {
        const controls = document.querySelector('.control-buttons');
        if (!controls) return;

        const reloadBtn = document.createElement('button');
        reloadBtn.className = 'reload-button';
        reloadBtn.innerHTML = 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å';
        reloadBtn.title = '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∏–∑ JSON —Ñ–∞–π–ª–∞';
        reloadBtn.addEventListener('click', reloadFromJSON);

        controls.appendChild(reloadBtn);
    }

    function setupDragAndDrop() {
        if (!dropZone) return;

        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            document.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∑–æ–Ω—ã drop
        ['dragenter', 'dragover'].forEach(eventName => {
            document.addEventListener(eventName, highlightDropZone, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            document.addEventListener(eventName, unhighlightDropZone, false);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ drop
        dropZone.addEventListener('drop', handleDrop, false);

        function highlightDropZone() {
            if (dropZone) {
                dropZone.style.display = 'flex';
                setTimeout(() => {
                    dropZone.style.opacity = '1';
                }, 10);
            }
        }

        function unhighlightDropZone() {
            if (dropZone) {
                dropZone.style.opacity = '0';
                setTimeout(() => {
                    dropZone.style.display = 'none';
                }, 300);
            }
        }

        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            handleDroppedFiles(files);
        }
        
        console.log('‚úÖ Drag and Drop –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    function handleDroppedFiles(files) {
        console.log('üìÅ –ü–µ—Ä–µ—Ç–∞—â–µ–Ω—ã —Ñ–∞–π–ª—ã:', files);
        
        const bookFiles = Array.from(files).filter(file => {
            const extension = file.name.split('.').pop().toLowerCase();
            return ['pdf', 'epub', 'txt', 'fb2'].includes(extension);
        });

        if (bookFiles.length > 0) {
            openAddBookModal();
            console.log(`‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${bookFiles.length} –∫–Ω–∏–≥(–∏)`);
            showMessage(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${bookFiles.length} –∫–Ω–∏–≥(–∏). –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ.`, 'info');
        } else {
            console.warn('‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –∫–Ω–∏–≥');
            showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã –∫–Ω–∏–≥ (PDF, EPUB, TXT, FB2)', 'error');
        }
    }

    function openAddBookModal() {
        console.log('üìñ –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏');
        if (addBookModal) {
            addBookModal.style.display = 'block';
            document.body.style.overflow = 'hidden';
        }
    }

    function closeAddBookModal() {
        console.log('üìñ –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞');
        if (addBookModal) {
            addBookModal.style.display = 'none';
            document.body.style.overflow = 'auto';
        }
        if (bookForm) {
            bookForm.reset();
        }
        if (coverPreview) {
            coverPreview.innerHTML = '';
            coverPreview.style.display = 'none';
        }
    }

    function handleCoverPreview(event) {
        const file = event.target.files[0];
        if (file && coverPreview) {
            console.log('üñºÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–≤—å—é –æ–±–ª–æ–∂–∫–∏:', file.name);
            const reader = new FileReader();
            reader.onload = function(e) {
                coverPreview.innerHTML = `<img src="${e.target.result}" alt="Preview" style="max-width: 200px; max-height: 200px; border-radius: 8px;">`;
                coverPreview.style.display = 'block';
            };
            reader.readAsDataURL(file);
        }
    }

    function handleAddBookSubmit(event) {
        event.preventDefault();
        console.log('üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏...');
        
        const formData = new FormData(bookForm);
        const title = formData.get('title');
        const author = formData.get('author');
        
        if (!title || !author) {
            showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä', 'error');
            return;
        }

        const newBook = {
            id: generateBookId(),
            title: title,
            author: author,
            genre: formData.get('genre') || '–ë–µ–∑ –∂–∞–Ω—Ä–∞',
            description: formData.get('description') || '',
            addedDate: new Date().toISOString().split('T')[0],
            cover: '',
            filePath: ''
        };

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∫–Ω–∏–≥–∏
        const bookFile = document.getElementById('book-file').files[0];
        if (bookFile) {
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
            newBook.filePath = `books/${bookFile.name}`;
            console.log('üìÅ –§–∞–π–ª –∫–Ω–∏–≥–∏:', bookFile.name);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–ª–æ–∂–∫–∏
        const coverFile = document.getElementById('cover-image').files[0];
        if (coverFile) {
            const reader = new FileReader();
            reader.onload = function(e) {
                newBook.cover = e.target.result;
                addBookToLibrary(newBook);
            };
            reader.readAsDataURL(coverFile);
        } else {
            addBookToLibrary(newBook);
        }
    }

    function addBookToLibrary(book) {
        console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É:', book);
        
        books.unshift(book);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        renderBooks(books);
        populateGenres(books);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        localStorage.setItem('allBooks', JSON.stringify(books));
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        closeAddBookModal();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        showMessage(`–ö–Ω–∏–≥–∞ "${book.title}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!`, 'success');
    }

    function generateBookId() {
        return 'book_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }

    function renderBooks(booksToRender) {
        if (!booksContainer) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç books-container –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM');
            return;
        }
        
        console.log('üé® –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–Ω–∏–≥:', booksToRender.length);

        if (booksToRender.length === 0) {
            showEmptyLibrary();
            return;
        }

        booksContainer.innerHTML = booksToRender.map(book => {
            const title = book.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
            const author = book.author || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä';
            const genre = book.genre || '–ë–µ–∑ –∂–∞–Ω—Ä–∞';
            const description = book.description || '';
            
            let dateText = '';
            try {
                const date = book.addedDate || book.dateAdded || book.date;
                dateText = date ? new Date(date).toLocaleDateString('ru-RU') : '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
            } catch (e) {
                dateText = '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
            }

            const coverContent = book.cover ? 
                `<img src="${book.cover}" alt="${title}" class="book-cover-img">` : 
                '<div class="book-cover-placeholder">üìñ</div>';

            return `
                <div class="book-card" data-book-id="${book.id}">
                    <div class="book-cover">
                        ${coverContent}
                    </div>
                    <div class="book-info">
                        <h3 class="book-title">${escapeHtml(title)}</h3>
                        <p class="book-author">${escapeHtml(author)}</p>
                        <p class="book-genre">${escapeHtml(genre)}</p>
                        <p class="book-date">${escapeHtml(dateText)}</p>
                        ${description ? `<p class="book-description">${escapeHtml(description)}</p>` : ''}
                    </div>
                </div>
            `;
        }).join('');

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤
        const bookCards = booksContainer.querySelectorAll('.book-card');
        console.log(`üéØ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è ${bookCards.length} –∫–∞—Ä—Ç–æ—á–µ–∫`);
        
        bookCards.forEach(card => {
            card.addEventListener('click', function() {
                const bookId = this.getAttribute('data-book-id');
                console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–∏–≥–µ —Å ID:', bookId);
                openBookView(bookId);
            });
        });
    }

    function applyFilters() {
        const searchText = (searchInput?.value || '').toLowerCase();
        const genre = genreFilter?.value || 'all';
        const sortBy = sortSelect?.value || 'title';

        console.log(`üîç –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤: –ø–æ–∏—Å–∫="${searchText}", –∂–∞–Ω—Ä="${genre}", —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞="${sortBy}"`);

        let filtered = books.filter(book => {
            const bookTitle = (book.title || '').toLowerCase();
            const bookAuthor = (book.author || '').toLowerCase();
            const bookGenre = (book.genre || '').toLowerCase();
            const bookDescription = (book.description || '').toLowerCase();
            
            const matchesSearch = searchText === '' || 
                bookTitle.includes(searchText) ||
                bookAuthor.includes(searchText) ||
                bookDescription.includes(searchText);
            
            const matchesGenre = genre === 'all' || bookGenre === genre.toLowerCase();
            
            return matchesSearch && matchesGenre;
        });

        console.log(`üìä –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${filtered.length} –∫–Ω–∏–≥`);

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        if (sortBy === 'title') {
            filtered.sort((a, b) => (a.title || '').localeCompare(b.title || ''));
        } else if (sortBy === 'author') {
            filtered.sort((a, b) => (a.author || '').localeCompare(b.author || ''));
        } else if (sortBy === 'date-added') {
            filtered.sort((a, b) => {
                const dateA = new Date(a.addedDate || a.dateAdded || a.date || 0);
                const dateB = new Date(b.addedDate || b.dateAdded || b.date || 0);
                return dateB - dateA;
            });
        }

        renderBooks(filtered);
    }

    function populateGenres(books) {
        if (!genreFilter) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç genre-filter –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        console.log('üé≠ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∂–∞–Ω—Ä–æ–≤...');
        
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –æ–ø—Ü–∏–∏ –∫—Ä–æ–º–µ "–í—Å–µ –∂–∞–Ω—Ä—ã"
        while (genreFilter.children.length > 1) {
            genreFilter.removeChild(genreFilter.lastChild);
        }

        const genres = [...new Set(books.map(b => b.genre).filter(genre => genre && genre.trim() !== ''))];
        genres.sort();
        
        console.log('üìã –ù–∞–π–¥–µ–Ω—ã –∂–∞–Ω—Ä—ã:', genres);
        
        genres.forEach(genre => {
            const opt = document.createElement('option');
            opt.value = genre;
            opt.textContent = genre;
            genreFilter.appendChild(opt);
        });
    }

    function showMessage(message, type = 'info') {
        console.log(`üí¨ –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (${type}):`, message);
        
        const notification = document.createElement('div');
        const bgColor = type === 'success' ? '#10b981' : 
                       type === 'error' ? '#ef4444' : '#3b82f6';
        
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${bgColor};
            color: white;
            padding: 15px 20px;
            border-radius: 8px;
            z-index: 10000;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            animation: slideIn 0.3s ease;
            max-width: 400px;
            font-weight: 500;
        `;
        
        notification.textContent = message;
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.animation = 'slideOut 0.3s ease';
            setTimeout(() => {
                if (document.body.contains(notification)) {
                    document.body.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }

    function escapeHtml(unsafe) {
        if (typeof unsafe !== 'string') return unsafe;
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    const style = document.createElement('style');
    style.textContent = `
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        @keyframes slideOut {
            from { transform: translateX(0); opacity: 1; }
            to { transform: translateX(100%); opacity: 0; }
        }
        .loading-spinner {
            width: 40px;
            height: 40px;
            border: 3px solid #334155;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    `;
    document.head.appendChild(style);

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    window.openBookView = function(bookId) {
        console.log('üîÑ openBookView –≤—ã–∑–≤–∞–Ω —Å ID:', bookId);
        
        if (!bookId) {
            console.error('‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω ID –∫–Ω–∏–≥–∏');
            showMessage('–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω ID –∫–Ω–∏–≥–∏', 'error');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–Ω–∏–≥–∞
        const book = books.find(b => b.id === bookId);
        if (!book) {
            console.error('‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –º–∞—Å—Å–∏–≤–µ');
            showMessage(`–ö–Ω–∏–≥–∞ —Å ID "${bookId}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!`, 'error');
            return;
        }
        
        console.log('‚úÖ –ö–Ω–∏–≥–∞ –Ω–∞–π–¥–µ–Ω–∞:', book.title);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–Ω–∏–≥–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        localStorage.setItem('currentBookId', bookId);
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–Ω–∏–≥–∏
        console.log('üîó –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ book-view.html...');
        window.location.href = 'book-view.html';
    };

    window.openAddBookModal = openAddBookModal;
    window.reloadFromJSON = reloadFromJSON;

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    init();
});