const { ipcRenderer } = require('electron');

document.addEventListener('DOMContentLoaded', () => {
    const displayMonthElement = document.getElementById('displayMonth');
    const displayYearElement = document.getElementById('displayYear');
    const currentMonthYearElement = document.getElementById('currentMonthYear');
    const calendarDaysElement = document.getElementById('calendarDays');
    const prevMonthBtn = document.getElementById('prevMonth');
    const nextMonthBtn = document.getElementById('nextMonth');
    const taskInput = document.getElementById('taskInput');
    const addTaskBtn = document.getElementById('addTaskBtn');
    const tasksList = document.getElementById('tasksList');

    const months = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", 
                   "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"];

    let currentDate = new Date();
    let currentYear = currentDate.getFullYear();
    let currentMonth = currentDate.getMonth();
    let currentDay = currentDate.getDate();
    let tasks = [];
    let selectedDay = currentDay;

    async function init() {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–Ω–µ—Ä–∞...');
        await loadTasks();
        setupEventListeners();
        updateCalendar();
    }

    async function loadTasks() {
        console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á...');
        
        showLoadingState();
        
        try {
            const data = await ipcRenderer.invoke('read-file', 'data_plan/planner.json');
            console.log('üìÑ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', data);
            
            let parsedData;
            try {
                parsedData = JSON.parse(data);
                if (parsedData.success !== undefined) {
                    if (parsedData.success && parsedData.content) {
                        parsedData = JSON.parse(parsedData.content);
                    } else {
                        throw new Error(parsedData.error || 'Invalid data format');
                    }
                }
            } catch (parseError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö:', parseError);
                parsedData = typeof data === 'string' ? JSON.parse(data) : data;
            }
            
            tasks = parsedData.tasks || [];
            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á:', tasks.length);
            updateTasksDisplay();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞:', error);
            loadFromLocalStorage();
        }
    }

    function loadFromLocalStorage() {
        console.log('üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage...');
        const savedTasks = localStorage.getItem('plannerTasks_fallback');
        
        if (savedTasks) {
            try {
                tasks = JSON.parse(savedTasks);
                console.log('‚úÖ –ó–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage:', tasks.length);
                updateTasksDisplay();
                showMessage('–ó–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏', 'info');
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ localStorage:', error);
                tasks = [];
                updateTasksDisplay();
            }
        } else {
            tasks = [];
            updateTasksDisplay();
        }
    }

    async function saveTasks() {
        try {
            const plannerData = {
                tasks: tasks,
                lastUpdated: new Date().toISOString(),
                currentView: {
                    year: currentYear,
                    month: currentMonth,
                    day: selectedDay
                }
            };

            const result = await ipcRenderer.invoke('write-file', 'data_plan/planner.json', JSON.stringify(plannerData, null, 2));
            console.log('üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', result);
            
            let saveResult;
            try {
                saveResult = JSON.parse(result);
            } catch {
                saveResult = { success: true };
            }
            
            if (saveResult.success) {
                console.log('‚úÖ –ó–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª');
            } else {
                throw new Error(saveResult.error || 'Unknown save error');
            }
            
            localStorage.setItem('plannerTasks_fallback', JSON.stringify(tasks));
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª:', error);
            localStorage.setItem('plannerTasks_fallback', JSON.stringify(tasks));
            showMessage('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ', 'error');
        }
    }

    function showLoadingState() {
        if (tasksList) {
            tasksList.innerHTML = `
                <div class="loading-state" style="text-align: center; padding: 40px 20px;">
                    <div class="loading-spinner"></div>
                    <p style="color: #94a3b8; margin-top: 15px;">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á...</p>
                </div>
            `;
        }
    }

    function updateCalendar() {
        if (displayMonthElement) displayMonthElement.textContent = months[currentMonth];
        if (displayYearElement) displayYearElement.textContent = currentYear;
        if (currentMonthYearElement) currentMonthYearElement.textContent = `${months[currentMonth]} ${currentYear}`;
        
        renderCalendar();
    }

    function renderCalendar() {
        if (!calendarDaysElement) return;
        
        calendarDaysElement.innerHTML = '';
        
        const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();
        const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
        
        let startDay = firstDayOfMonth === 0 ? 6 : firstDayOfMonth - 1;
        
        console.log(`üìÖ –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: ${months[currentMonth]} ${currentYear}, –¥–Ω–µ–π: ${daysInMonth}, –Ω–∞—á–∞–ª–æ: ${startDay}`);
        
        for (let i = 0; i < startDay; i++) {
            const emptyDay = document.createElement('div');
            emptyDay.classList.add('calendar__day-number', 'calendar__day-number--other');
            calendarDaysElement.appendChild(emptyDay);
        }
        
        for (let i = 1; i <= daysInMonth; i++) {
            const dayElement = document.createElement('div');
            dayElement.classList.add('calendar__day-number');
            dayElement.textContent = i;
            
            const isToday = i === currentDate.getDate() && 
                           currentYear === currentDate.getFullYear() && 
                           currentMonth === currentDate.getMonth();
            
            const isSelected = i === selectedDay;
            
            if (isToday) {
                dayElement.classList.add('calendar__day-number--current');
            }
            
            if (isSelected) {
                dayElement.classList.add('calendar__day-number--selected');
            }
            
            const taskDate = formatDate(i, currentMonth, currentYear);
            const dayTasks = tasks.filter(task => task.date === taskDate && !task.completed);
            if (dayTasks.length > 0) {
                dayElement.classList.add('calendar__day-number--has-tasks');
                const taskIndicator = document.createElement('div');
                taskIndicator.classList.add('task-indicator');
                taskIndicator.textContent = dayTasks.length;
                dayElement.appendChild(taskIndicator);
            }
            
            dayElement.addEventListener('click', () => selectDay(i));
            calendarDaysElement.appendChild(dayElement);
        }
    }

    function formatDate(day, month, year) {
        return `${day.toString().padStart(2, '0')}.${(month + 1).toString().padStart(2, '0')}.${year}`;
    }

    function selectDay(day) {
        console.log(`üìå –í—ã–±—Ä–∞–Ω –¥–µ–Ω—å: ${day}`);
        selectedDay = day;
        
        const allDays = document.querySelectorAll('.calendar__day-number');
        allDays.forEach(d => {
            d.classList.remove('calendar__day-number--selected');
        });
        
        const selectedDayElement = Array.from(allDays).find(d => {
            const dayNumber = parseInt(d.textContent);
            return !isNaN(dayNumber) && dayNumber === day && 
                   !d.classList.contains('calendar__day-number--other');
        });
        
        if (selectedDayElement) {
            selectedDayElement.classList.add('calendar__day-number--selected');
        }
        
        updateTasksDisplay();
    }

    function setupEventListeners() {
        if (prevMonthBtn) {
            prevMonthBtn.addEventListener('click', () => {
                currentMonth--;
                if (currentMonth < 0) {
                    currentMonth = 11;
                    currentYear--;
                }
                selectedDay = 1;
                updateCalendar();
                updateTasksDisplay();
            });
        }

        if (nextMonthBtn) {
            nextMonthBtn.addEventListener('click', () => {
                currentMonth++;
                if (currentMonth > 11) {
                    currentMonth = 0;
                    currentYear++;
                }
                selectedDay = 1;
                updateCalendar();
                updateTasksDisplay();
            });
        }

        if (addTaskBtn) {
            addTaskBtn.addEventListener('click', addTask);
        }
        
        if (taskInput) {
            taskInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    addTask();
                }
            });
        }

        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }

    async function addTask() {
        const taskText = taskInput?.value.trim();
        if (!taskText) {
            showMessage('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏', 'error');
            return;
        }
        
        const taskDate = formatDate(selectedDay, currentMonth, currentYear);
        const task = {
            id: Date.now() + Math.random(),
            text: taskText,
            date: taskDate,
            completed: false,
            createdAt: new Date().toISOString()
        };
        
        console.log('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:', task);
        
        tasks.push(task);
        await saveTasks();
        
        if (taskInput) {
            taskInput.value = '';
            taskInput.focus();
        }
        
        updateCalendar();
        updateTasksDisplay();
        
        showMessage('–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', 'success');
    }

    function updateTasksDisplay() {
        if (!tasksList) return;
        
        const currentTaskDate = formatDate(selectedDay, currentMonth, currentYear);
        const dayTasks = tasks.filter(task => task.date === currentTaskDate);
        
        console.log(`üìã –ó–∞–¥–∞—á–∏ –Ω–∞ ${currentTaskDate}:`, dayTasks.length);
        
        if (dayTasks.length === 0) {
            showEmptyTasks();
            return;
        }
        
        dayTasks.sort((a, b) => {
            if (a.completed && !b.completed) return 1;
            if (!a.completed && b.completed) return -1;
            return new Date(b.createdAt) - new Date(a.createdAt);
        });
        
        tasksList.innerHTML = dayTasks.map(task => `
            <div class="task-item ${task.completed ? 'task-item--completed' : ''}" data-task-id="${task.id}">
                <span class="task-text">${escapeHtml(task.text)}</span>
                <div class="task-actions">
                    <button class="task-complete-btn" title="${task.completed ? '–í–µ—Ä–Ω—É—Ç—å –≤ —Ä–∞–±–æ—Ç—É' : '–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é'}">
                        ${task.completed ? '‚Ü∂' : '‚úì'}
                    </button>
                    <button class="task-delete-btn" title="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É">√ó</button>
                </div>
            </div>
        `).join('');
        
        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        attachTaskEventHandlers();
    }

    function attachTaskEventHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
        const completeButtons = tasksList.querySelectorAll('.task-complete-btn');
        completeButtons.forEach(button => {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            button.replaceWith(button.cloneNode(true));
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        const newCompleteButtons = tasksList.querySelectorAll('.task-complete-btn');
        newCompleteButtons.forEach(button => {
            button.addEventListener('click', function(e) {
                e.stopPropagation();
                e.preventDefault();
                
                const taskItem = this.closest('.task-item');
                const taskId = parseFloat(taskItem.getAttribute('data-task-id'));
                console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–∞—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ ID:', taskId);
                
                toggleTaskCompletion(taskId);
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
        const deleteButtons = tasksList.querySelectorAll('.task-delete-btn');
        deleteButtons.forEach(button => {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            button.replaceWith(button.cloneNode(true));
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        const newDeleteButtons = tasksList.querySelectorAll('.task-delete-btn');
        newDeleteButtons.forEach(button => {
            button.addEventListener('click', function(e) {
                e.stopPropagation();
                e.preventDefault();
                
                const taskItem = this.closest('.task-item');
                const taskId = parseFloat(taskItem.getAttribute('data-task-id'));
                console.log('üóëÔ∏è –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–∂–∞—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ ID:', taskId);
                
                deleteTask(taskId);
            });
        });

        console.log(`üéØ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: ${newCompleteButtons.length} –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, ${newDeleteButtons.length} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`);
    }

    function showEmptyTasks() {
        if (tasksList) {
            tasksList.innerHTML = `
                <div class="empty-state" style="text-align: center; padding: 40px 20px;">
                    <div class="empty-icon" style="font-size: 48px; margin-bottom: 15px;">üìù</div>
                    <h3 style="color: #fff; margin-bottom: 10px;">–ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å</h3>
                    <p style="color: #94a3b8;">–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É</p>
                </div>
            `;
        }
    }

    async function toggleTaskCompletion(taskId) {
        console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ ID:', taskId);
        
        const taskIndex = tasks.findIndex(task => task.id === taskId);
        console.log('üìä –ù–∞–π–¥–µ–Ω –∏–Ω–¥–µ–∫—Å –∑–∞–¥–∞—á–∏:', taskIndex);
        
        if (taskIndex !== -1) {
            tasks[taskIndex].completed = !tasks[taskIndex].completed;
            tasks[taskIndex].updatedAt = new Date().toISOString();
            
            console.log('üìù –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏:', tasks[taskIndex].completed);
            
            await saveTasks();
            updateCalendar();
            updateTasksDisplay();
            
            const action = tasks[taskIndex].completed ? '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞' : '–≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ —Ä–∞–±–æ—Ç—É';
            showMessage(`–ó–∞–¥–∞—á–∞ "${tasks[taskIndex].text}" ${action}`, 'success');
        } else {
            console.error('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
            showMessage('–û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error');
        }
    }

    async function deleteTask(taskId) {
        console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ ID:', taskId);
        
        const taskIndex = tasks.findIndex(task => task.id === taskId);
        console.log('üìä –ù–∞–π–¥–µ–Ω –∏–Ω–¥–µ–∫—Å –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', taskIndex);
        
        if (taskIndex !== -1) {
            const taskText = tasks[taskIndex].text;
            console.log('üìù –£–¥–∞–ª—è–µ–º–∞—è –∑–∞–¥–∞—á–∞:', taskText);
            
            tasks = tasks.filter(task => task.id !== taskId);
            console.log('‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞, –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞–¥–∞—á:', tasks.length);
            
            await saveTasks();
            updateCalendar();
            updateTasksDisplay();
            
            showMessage(`–ó–∞–¥–∞—á–∞ "${taskText}" —É–¥–∞–ª–µ–Ω–∞`, 'info');
        } else {
            console.error('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
            showMessage('–û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error');
        }
    }

    function showMessage(message, type = 'info') {
        const existingNotifications = document.querySelectorAll('.notification-message');
        existingNotifications.forEach(notification => notification.remove());
        
        const notification = document.createElement('div');
        notification.className = 'notification-message';
        const bgColor = type === 'success' ? '#10b981' : 
                       type === 'error' ? '#ef4444' : '#3b82f6';
        
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${bgColor};
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            z-index: 10000;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            animation: slideIn 0.3s ease;
            max-width: 300px;
            font-weight: 500;
            font-size: 14px;
        `;
        
        notification.textContent = message;
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.animation = 'slideOut 0.3s ease';
            setTimeout(() => {
                if (document.body.contains(notification)) {
                    document.body.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }

    function escapeHtml(unsafe) {
        if (typeof unsafe !== 'string') return unsafe;
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
    const style = document.createElement('style');
    style.textContent = `
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        @keyframes slideOut {
            from { transform: translateX(0); opacity: 1; }
            to { transform: translateX(100%); opacity: 0; }
        }
        .loading-spinner {
            width: 30px;
            height: 30px;
            border: 3px solid #334155;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 15px;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .task-indicator {
            position: absolute;
            top: 2px;
            right: 2px;
            background: #23839d;
            color: white;
            border-radius: 50%;
            width: 16px;
            height: 16px;
            font-size: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            line-height: 1;
        }
        .calendar__day-number {
            position: relative;
        }
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∑–∞–¥–∞—á */
        .task-actions {
            display: flex;
            gap: 5px;
        }
        
        .task-complete-btn, .task-delete-btn {
            background: none;
            border: none;
            cursor: pointer;
            padding: 5px 8px;
            border-radius: 4px;
            font-size: 14px;
            transition: all 0.2s ease;
        }
        
        .task-complete-btn {
            color: #10b981;
            border: 1px solid #10b981;
        }
        
        .task-complete-btn:hover {
            background: #10b981;
            color: white;
        }
        
        .task-delete-btn {
            color: #ef4444;
            border: 1px solid #ef4444;
        }
        
        .task-delete-btn:hover {
            background: #ef4444;
            color: white;
        }
    `;
    document.head.appendChild(style);

    // –ó–∞–ø—É—Å–∫–∞–µ–º
    init();
});